plugins {
    id "java"
    id "jacoco"
    id "org.springframework.boot" version "3.4.1"
    id "io.spring.dependency-management" version "1.1.7"
    id "org.springdoc.openapi-gradle-plugin" version "1.9.0"
    id "org.sonarqube" version "6.0.1.5171"
}

////////////////////////////// VARIABLES //////////////////////////////

group = "sleppy-navigators"
version = "0.0.1-SNAPSHOT"

def querydslDir = "${layout.buildDirectory.get()}/generated/querydsl"

//////////////////////////// CONFIGURATION ////////////////////////////

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    main.java.srcDirs += [querydslDir]
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

sonar {
    properties {
        property "sonar.projectKey", "sleppy-navigators_study-up-backend"
        property "sonar.organization", "sleppy-navigators"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

///////////////////////////// DEPENDENCIES /////////////////////////////

ext {
    apacheCommonsLangVersion = "3.14.0"
    apacheCommonsCollectionsVersion = "4.4"
    springAwsVersion = "3.0.0"
    okHttpVersion = "5.0.0-alpha.12"
    jjwtVersion = "0.12.3"
    queryDslVersion = "5.1.0"
    springDocVersion = "2.8.1"
    restAssuredVersion = "5.4.0"
    assertJVersion = "3.25.3"
    awaitilityVersion = "4.2.0"
    flappdoodleVersion = "4.11.0"
    firebaseAdminVersion = "9.2.0"
}

dependencies {
    // Spring Boot Core
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // Monitoring
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "io.micrometer:micrometer-registry-prometheus"

    // Validation
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "org.apache.commons:commons-lang3:${apacheCommonsLangVersion}"
    implementation "org.apache.commons:commons-collections4:${apacheCommonsCollectionsVersion}"

    // AWS
    implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:${springAwsVersion}")
    implementation "io.awspring.cloud:spring-cloud-aws-starter"
    implementation "io.awspring.cloud:spring-cloud-aws-starter-s3"

    // Http Client
    implementation "com.squareup.okhttp3:okhttp:${okHttpVersion}"

    // Socket
    implementation "org.springframework.boot:spring-boot-starter-websocket"

    // Firebase
    implementation "com.google.firebase:firebase-admin:${firebaseAdminVersion}"

    // Security
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

    // Database
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "com.mysql:mysql-connector-j"

    // Lombok
    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"

    // API Documentation
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"

    // Testing
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    testImplementation "org.assertj:assertj-core:${assertJVersion}"
    testImplementation "org.awaitility:awaitility:${awaitilityVersion}"
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring3x:${flappdoodleVersion}"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

////////////////////////////////// TASKS //////////////////////////////////

tasks.named("test") {
    useJUnitPlatform()
}

tasks.named("jacocoTestReport") {
    reports {
        xml.required = true
    }
}

tasks.withType(JavaCompile).configureEach {
    options.generatedSourceOutputDirectory = file(querydslDir)
}

tasks.named("clean") {
    doLast {
        delete file(querydslDir)
    }
}
